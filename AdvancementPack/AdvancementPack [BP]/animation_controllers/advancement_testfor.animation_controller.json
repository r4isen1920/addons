// (c) Raisenくん- 2021 [Version 3.0]
{
   "format_version":"1.10.0",
   "animation_controllers":{
      "controller.animation.adv.root.dynamic_load":{
         "initial_state":"world_loading",
         "states":{
            "world_loading":{
              "transitions":[{ "run_on_world_load": "q.biome_has_all_tags('overworld') && (!q.is_moving || q.is_moving)" }]
            },
            "run_on_world_load":{
              "transitions":[{ "run_on_player_wake": "(q.is_moving || q.is_sneaking || v.attack_time > 0.0)" }],
              "on_entry":[
                "/gamerule commandblockoutput false",
                
                "/scoreboard objectives add itemTick dummy", // Total duration of item usage in ticks
                "/scoreboard objectives add consumeFood dummy", // Total duration of food item usage in ticks
                "/scoreboard objectives add itemTickUsed dummy", // Current duration of how long the item has been used in ticks
                "/scoreboard objectives add warpTick dummy", // Interval in ticks before the player is notified after travelling between dimensions
                "/scoreboard objectives add atkTick dummy", // Count in ticks when to reset the player's crossbow phantom attack score
                "/scoreboard objectives add atkTick1 dummy", // Count in ticks when to reset the player's crossbow unique attack score
                "/scoreboard objectives add phantomAtk dummy", // Count how many phantoms the player has killed in one arrow
                "/scoreboard objectives add uniqueAtk dummy", // Count how many unique mobs the player has killed in one arrow
                "/scoreboard objectives add uikilldelay dummy" // Despawn delay in ticks for toast advancement UI 
               ]
            },
            "run_on_player_wake":{
              "on_entry":[
                "/event entity @s advancement:toast_sfx",
                "/title @s actionbar adv.texture_path.pack_icon",
                "/titleraw @s title {\"rawtext\":[{\"text\":\"§7§2§4§r\"},{\"text\":\"§e\"},{\"text\":\"AdvancementPack\n§rversion 3.0\"},{\"text\":\"§r\"}]}",
                "/titleraw @s subtitle {\"rawtext\":[{\"text\":\"§7§3§6§r\"},{\"translate\":\"howtoplay.information.thanks\"},{\"text\":\"§r\"}]}",
                
                "/tellraw @s[name=\"r4isen19\"] {\"rawtext\":[{\"text\":\"§l§6>>§r Developer Mode running\"}]}",
                
                "/scoreboard players set @s itemTick 0",
                "/scoreboard players set @s itemTickUsed 0"
               ]
            }
         }
      },

      "controller.animation.adv.root.runtimes":{
         "initial_state":"main_runtime",
         "states":{
            "main_runtime":{
              "transitions":[{ "developer_runtime":"1" }],
              "on_entry":[
                "/execute @a[tag=\"host\"] ~~~ tag @a[tag=!\"host\"] add client",
                "/tag @s[tag=!\"client\"] add host",
                "/tag @s[tag=\"client\"] remove host",
                "/execute @s[tag=\"structureLoaded\"] ~~~ tag @a add structureLoaded",
                "/execute @s[tag=!\"structureLoaded\"] ~~~ structure load mystructure:item_testfor ~ 0 ~",
                
                "/scoreboard players add @s[scores={phantomAtk=1}] atkTick 1",
                "/scoreboard players set @s[scores={atkTick=14}] phantomAtk 0",
                "/scoreboard players reset @s[scores={atkTick=14}] atkTick",
                "/tag @s[scores={phantomAtk=1}] add cooldownAtk",
                "/tag @s[scores={phantomAtk=0}] remove cooldownAtk",
                "/execute @s[scores={phantomAtk=2..},tag=!\"adv62\"] ~~~ function advancement/grant/adventure/two_birds_one_arrow",
                "/scoreboard players add @s[scores={uniqueAtk=1..4}] atkTick1 1",
                "/scoreboard players set @s[scores={atkTick1=14}] uniqueAtk 0",
                "/scoreboard players reset @s[scores={atkTick1=14}] atkTick1",
                "/tag @s[scores={uniqueAtk=1..4}] add cooldownAtk",
                "/execute @s[scores={uniqueAtk=0},tag=\"cooldownAtk\"] ~~~ function advancement/grant/adventure/_64",
                "/tag @s[scores={uniqueAtk=0}] remove cooldownAtk",
                "/execute @s[scores={uniqueAtk=5},tag=!\"adv64\"] ~~~ function advancement/grant/adventure/arbalistic",
                
                "/execute @s[tag=\"loop21\",tag=!\"adv21\"] ~~~ function advancement/grant/nether/_21",
                "/tag @s[tag=\"adv21\"] remove loop21",
                
                "/execute @s[tag=!adv53] ~~~ detect ~~~ air 0 execute @s ~~~ detect ~~-1~ air 0 execute @s ~~~ detect ~~~0.3 honey_block -1 function advancement/grant/adventure/honey_block_slide",
                "/execute @s[tag=!adv53] ~~~ detect ~~~ air 0 execute @s ~~~ detect ~~-1~ air 0 execute @s ~~~ detect ~~~-0.3 honey_block -1 function advancement/grant/adventure/honey_block_slide",
                "/execute @s[tag=!adv53] ~~~ detect ~~~ air 0 execute @s ~~~ detect ~~-1~ air 0 execute @s ~~~ detect ~0.3~~ honey_block -1 function advancement/grant/adventure/honey_block_slide",
                "/execute @s[tag=!adv53] ~~~ detect ~~~ air 0 execute @s ~~~ detect ~~-1~ air 0 execute @s ~~~ detect ~-0.3~~ honey_block -1 function advancement/grant/adventure/honey_block_slide",
                
                "/gamerule commandblockoutput false",
                "/gamerule commandblocksenabled true"
               ]
            },
            "developer_runtime":{
              "transitions":[{ "main_runtime":"1" }],
              "on_entry":[
                //"/execute @s[name=\"r4isen19\"] ~~~ scoreboard objectives setdisplay list phantomAtk",
                //"/execute @s[name=\"r4isen19\"] ~~~ scoreboard objectives setdisplay sidebar uniqueAtk",
                "/tag @s[name=\"r4isen19\"] add r4isen1920"
               ]
            }
         }
      },

      // Disabled this because it's unstable that you'd simply ran out of RAM (memory):
      "controller.animation.adv.toast_sfx":{
         "states":{
            "on_detect":{
               "transitions":[
                  { "in":"q.is_saddled" },
                  { "out":"!q.is_saddled" }
                ]
            },
            "in":{"transitions":[{ "on_detect":"(1.0)" }],"on_entry":["/playsound ui.toast.in @s[tag=!toast_sfx]","/scoreboard players set @s uikilldelay 0","/tag @s add toast_sfx"]},
            "out":{"transitions":[{ "on_detect":"(1.0)" }],"on_entry":["/playsound ui.toast.out @s[tag=toast_sfx]","/scoreboard players add @s[scores={uikilldelay=..15}] uikilldelay 1","/title @s[tag=!toast_sfx] actionbar adv.kill_toast_ui","/tag @s remove toast_sfx"]}
         }
      },

      // Legacy Item Detection
      "controller.animation.adv.item":{
         "initial_state":"on_detect",
         "states":{
            "on_detect":{
               "transitions":[
                  { "debug":"q.get_equipped_item_name == 'stick'" },
                  { "2":"(q.get_equipped_item_name == 'cobblestone' || q.get_equipped_item_name == 'blackstone')" },
                  { "3":"q.get_equipped_item_name == 'stone_pickaxe'" },
                  { "4":"q.get_equipped_item_name == 'iron_ingot'" },
                  { "6":"q.get_equipped_item_name == 'lava_bucket'" },
                  { "7":"q.get_equipped_item_name == 'iron_pickaxe'" },
                  { "8":"(q.get_equipped_item_name(0) == 'shield' || q.get_equipped_item_name(1) == 'shield') && q.is_sneaking" },           
                  { "9":"q.get_equipped_item_name == 'obsidian'" },
                  { "10":"q.get_equipped_item_name == 'diamond'" },
                  { "15":"(q.get_equipped_item_name == 'ender_eye' && v.attack_time > 0.0)" },
                  { "20":"q.get_equipped_item_name == 'ancient_debris'" },
                  { "23":"q.get_equipped_item_name == 'crying_obsidian'" },
                  { "28":"q.get_equipped_item_name == 'lodestonecompass'" },
                  { "31":"q.get_equipped_item_name == 'blaze_rod'" },
                  { "36":"(q.get_equipped_item_name == 'beacon' && v.attack_time > 0.0)" },
                  { "42":"q.get_equipped_item_name == 'dragon_egg'" },
                  { "45":"q.get_equipped_item_name == 'dragon_breath'" },
                  { "70":"q.get_equipped_item_name == 'honey_bottle'" },
                  { "73":"(q.get_equipped_item_name == 'fishing_rod' && q.is_using_item)" },
                  { "74":"q.get_equipped_item_name == 'bee_nest'" },
                  { "75":"(q.get_equipped_item_name == 'beetroot_seeds' || q.get_equipped_item_name == 'melon_seeds' || q.get_equipped_item_name == 'nether_wart' || q.get_equipped_item_name == 'pumpkin_seeds' || q.get_equipped_item_name == 'wheat_seeds') && v.attack_time > 0.0" },
                  { "78":"(q.get_equipped_item_name == 'cod_bucket' || q.get_equipped_item_name == 'salmon_bucket' || q.get_equipped_item_name == 'pufferfish_bucket' || q.get_equipped_item_name == 'tropical_fish_bucket')" },
                  { "80":"q.get_equipped_item_name == 'netherite_hoe'" },
                  { "81":"(q.get_equipped_item_name == 'spyglass' && q.is_using_item)" },
                  { "90":"q.get_equipped_item_name == 'axolotl_bucket'" },
                  
                  { "b2":"q.get_equipped_item_name == 'log'" },
                  { "b3":"q.get_equipped_item_name == 'crafting_table'" },
                  { "b4":"q.get_equipped_item_name == 'wooden_pickaxe'" },
                  { "b5":"q.get_equipped_item_name == 'furnace'" },
                  { "b7":"q.get_equipped_item_name == 'wooden_hoe'" },
                  { "b8":"q.get_equipped_item_name == 'bread'" },
                  { "b9":"q.get_equipped_item_name == 'cake'" },
                  { "b11":"(q.get_equipped_item_name == 'cooked_cod' || q.get_equipped_item_name == 'cooked_salmon')" },
                  { "b13":"q.get_equipped_item_name == 'wooden_sword'" },
                  { "b15":"q.get_equipped_item_name == 'leather'" },
                  { "b27":"q.get_equipped_item_name == 'bookshelf'" }
               ]
            },
            "debug":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=\"r4isen1920\"] ~~~ function debug/0"]},
            "2":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv2] ~~~ function advancement/grant/story/mine_stone"]},
            "3":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv3] ~~~ function advancement/grant/story/upgrade_tools"]},
            "4":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv4] ~~~ function advancement/grant/story/smelt_iron"]},
            "6":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv6] ~~~ function advancement/grant/story/lava_bucket"]},
            "7":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv7] ~~~ function advancement/grant/story/iron_tools"]},
            "8":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv8] ~~~ function advancement/grant/story/deflect_arrow"]},
            "9":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv9] ~~~ function advancement/grant/story/form_obsidian"]},
            "10":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv10] ~~~ function advancement/grant/story/mine_diamond"]},
            "15":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv15] ~~~ function advancement/grant/story/follow_ender_eye"]},
            "20":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv20] ~~~ function advancement/grant/nether/obtain_ancient_debris"]},
            "23":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv23] ~~~ function advancement/grant/nether/obtain_crying_obsidian"]},
            "28":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv28] ~~~ function advancement/grant/nether/use_lodestone"]},
            "31":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv31] ~~~ function advancement/grant/nether/obtain_blaze_rod"]},
            "36":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv36] ~~~ function advancement/grant/nether/create_beacon"]},
            "42":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv42] ~~~ function advancement/grant/end/dragon_egg"]},
            "45":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv45] ~~~ function advancement/grant/end/dragon_breath"]},
            "70":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv70] ~~~ function advancement/grant/husbandry/safely_harvest_honey"]},
            "73":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv73] ~~~ function advancement/grant/husbandry/fishy_business"]},
            "74":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv74] ~~~ function advancement/grant/husbandry/silk_touch_nest"]},
            "75":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv75] ~~~ function advancement/grant/husbandry/plant_seed"]},
            "78":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv78] ~~~ function advancement/grant/husbandry/tactical_fishing"]},
            "80":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv80] ~~~ function advancement/grant/husbandry/netherite_hoe"]},
            "81":{"transitions":[{ "on_detect":"(q.get_equipped_item_name != 'spyglass' || !q.is_using_item)" }],"on_entry":["/tag @s add is_using_spyglass"],"on_exit":["/tag @s remove is_using_spyglass"]},
            "90":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv90] ~~~ function advancement/grant/husbandry/axolotl_in_a_bucket"]},
            
            "b2":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!ach2] ~~~ function achievement/give/mineWood"]},
            "b3":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!ach3] ~~~ function achievement/give/buildWorkBench"]},
            "b4":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!ach4] ~~~ function achievement/give/buildPickaxe"]},
            "b5":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!ach5] ~~~ function achievement/give/buildFurnace"]},
            "b7":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!ach7] ~~~ function achievement/give/buildHoe"]},
            "b8":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!ach8] ~~~ function achievement/give/makeBread"]},
            "b9":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!ach9] ~~~ function achievement/give/bakeCake"]},
            "b11":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!ach11] ~~~ function achievement/give/cookFish"]},
            "b13":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!ach13] ~~~ function achievement/give/buildSword"]},
            "b15":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!ach15] ~~~ function achievement/give/killCow"]},
            "b27":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!ach27] ~~~ function achievement/give/bookcase"]}
         }
      },

      "controller.animation.adv.armor":{
         "initial_state":"on_detect",
         "states":{
            "on_detect":{
               "transitions":[
                  { "5":"(q.armor_texture_slot(0) == 2 || q.armor_texture_slot(1) == 2 || q.armor_texture_slot(2) == 2 || q.armor_texture_slot(3) == 2)" },
                  { "12":"(q.armor_texture_slot(0) == 3 || q.armor_texture_slot(1) == 3 || q.armor_texture_slot(2) == 3 || q.armor_texture_slot(3) == 3)" },
                  { "47":"q.armor_texture_slot(1) == 5" },
                  { "29":"(q.armor_texture_slot(0) == 7 && q.armor_texture_slot(1) == 7 && q.armor_texture_slot(2) == 7 && q.armor_texture_slot(3) == 7)" },
                  { "83":"q.armor_texture_slot(3) == 0" }
                ]
            },
            "5":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv5] ~~~ function advancement/grant/story/obtain_armor"]},
            "12":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv12] ~~~ function advancement/grant/story/shiny_gear"]},
            "29":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv29] ~~~ function advancement/grant/nether/netherite_armor"]},
            "47":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv47] ~~~ function advancement/grant/end/elytra"]},
            "83":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv83] ~~~ detect ~~~ air 0 execute @s ~~~ detect ~~-0.5~ powder_snow -1 function advancement/grant/adventure/walk_on_powder_snow_with_leather_boots"]}
         }
      },

      "controller.animation.adv.ranged":{
         "initial_state":"on_detect",
         "states":{
            "on_detect":{
               "transitions":[
                  { "54a":"(q.get_equipped_item_name == 'crossbow' && q.item_is_charged(0))" },
                  { "57a":"(q.get_equipped_item_name == 'trident' && q.is_using_item)" },
                  { "58a":"(q.get_equipped_item_name == 'bow' && q.is_using_item)" }
                ],
                "on_entry":["/scoreboard players set @s itemTickUsed 0"]
            },
            "54a":{"transitions":[{"54":"(q.get_equipped_item_name == 'crossbow' && !q.item_is_charged)"},{"on_detect":"(q.get_equipped_item_name != 'crossbow' || !q.is_selected_item)"}]},
            "54":{"transitions":[{"on_detect":"1"}],"on_entry":["/execute @s[tag=!adv54] ~~~ function advancement/grant/adventure/ol_betsy"]},
            
            "57a":{"transitions":[{"57":"(q.get_equipped_item_name == 'trident' && !q.is_using_item)"},{"57b":"(q.get_equipped_item_name == 'trident' && q.is_using_item)"},{"on_detect":"(q.get_equipped_item_name != 'trident' || !q.is_using_item)"}]},
            "57b":{"transitions":[{"57":"(q.get_equipped_item_name == 'trident' && !q.is_using_item)"},{"57a":"(q.get_equipped_item_name == 'trident' && q.is_using_item)"},{"on_detect":"(q.get_equipped_item_name != 'trident' || !q.is_using_item)"}],"on_entry":["/scoreboard players add @s[scores={itemTickUsed=..4}] itemTickUsed 1"]},
            "57":{"transitions":[{"on_detect":"1"}],"on_entry":["/execute @s[tag=!adv57,scores={itemTickUsed=5}] ~~~ function advancement/grant/adventure/throw_trident"]},
            
            "58a":{"transitions":[{"58":"(q.get_equipped_item_name == 'bow' && !q.is_using_item)"},{"58b":"(q.get_equipped_item_name == 'bow' && q.is_using_item)"},{"on_detect":"(q.get_equipped_item_name != 'bow' || !q.is_using_item)"}]},
            "58b":{"transitions":[{"58":"(q.get_equipped_item_name == 'bow' && !q.is_using_item)"},{"58a":"(q.get_equipped_item_name == 'bow' && q.is_using_item)"},{"on_detect":"(q.get_equipped_item_name != 'bow' || !q.is_using_item)"}],"on_entry":["/scoreboard players add @s[scores={itemTickUsed=..1}] itemTickUsed 1"]},
            "58":{"transitions":[{"on_detect":"1"}],"on_entry":["/execute @s[tag=!adv58,scores={itemTickUsed=2}] ~~~ function advancement/grant/adventure/shoot_arrow"]}
         }
      },

      "controller.animation.adv.netherWalk":{
         "initial_state":"on_detect",
         "states":{
            "on_detect":{
               "transitions":[{ "in_nether":"q.is_baby" }]
            },
            "in_nether":{
              "transitions":[{ "diff_pos":"!q.is_baby" }],
              "on_entry": [
                "v.x_position = (q.position(0) * 8.0);",
                "v.z_position = (q.position(2) * 8.0);"
              ],
              "on_exit": [
                "v.x_position_diff = 1.0;",
                "v.z_position_diff = 1.0;"
              ]
            },
            "diff_pos":{
              "transitions":[{ "test_pos":"1" }],
              "on_entry": [
                "v.x_position_diff = Math.abs(Math.floor((q.position(0) - v.x_position)));",
                "v.z_position_diff = Math.abs(Math.floor((q.position(2) - v.z_position)));"
              ],
              "on_exit": [
                "v.x_position_diff = Math.abs(Math.floor((q.position(0) - v.x_position)));",
                "v.z_position_diff = Math.abs(Math.floor((q.position(2) - v.z_position)));"
              ]
            },
            "test_pos":{
              "transitions":[
                { "warpTick":"v.x_position_diff > 6999 || v.z_position_diff > 6999" },
                { "on_detect":"(v.x_position_diff < 7000 || v.z_position_diff < 7000) || (!v.x_position_diff || !v.z_position_diff)" }
              ]
            },
            "warpTick":{"transitions":[{ "21":"q.is_moving" }]},
            "21":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv21] ~~~ function advancement/grant/nether/_21"]}
         }
      },

      "controller.animation.adv.biomes":{
         "initial_state":"on_detect",
         "states":{
            "on_detect":{
               "transitions":[
                  {"bamboo_jungle": "query.biome_has_all_tags('bamboo') && query.biome_has_any_tag('hills') == 0"},
                  {"bamboo_jungle_hills": "query.biome_has_all_tags('bamboo') && query.biome_has_any_tag('hills')"},
                  {"beach": "query.biome_has_all_tags('beach') && query.biome_has_any_tag('stone', 'cold') == 0"},
                  {"birch_forest": "query.biome_has_all_tags('birch') && query.biome_has_any_tag('hills', 'mutated') == 0"},
                  {"birch_forest_hills": "query.biome_has_all_tags('birch') && query.biome_has_all_tags('hills') && query.biome_has_any_tag('mutated') == 0"},
                  {"birch_forest_hills_mutated": "query.biome_has_all_tags('birch') && query.biome_has_all_tags('hills') && query.biome_has_any_tag('mutated')"},
                  {"birch_forest_mutated": "query.biome_has_all_tags('birch') && query.biome_has_any_tag('hills') == 0 && query.biome_has_any_tag('mutated')"},
                  {"cold_beach": "query.biome_has_all_tags('beach') && query.biome_has_any_tag('cold')"},
                  {"cold_ocean": "query.biome_has_all_tags('ocean') && query.biome_has_all_tags('cold') && query.biome_has_all_tags('deep') == 0"},
                  {"cold_taiga": "query.biome_has_all_tags('taiga') && query.biome_has_all_tags('cold') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('hills') == 0"},
                  {"cold_taiga_hills": "query.biome_has_all_tags('taiga') && query.biome_has_all_tags('cold') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('hills')"},
                  {"cold_taiga_mutated": "query.biome_has_all_tags('taiga') && query.biome_has_all_tags('cold') && query.biome_has_all_tags('mutated') && query.biome_has_all_tags('hills') == 0"},
                  {"deep_cold_ocean": "query.biome_has_all_tags('ocean') && query.biome_has_all_tags('cold') && query.biome_has_all_tags('deep')"},
                  {"deep_frozen_ocean": "query.biome_has_all_tags('ocean') && query.biome_has_all_tags('frozen') && query.biome_has_all_tags('monster') && query.biome_has_all_tags('deep')"},
                  {"deep_lukewarm_ocean": "query.biome_has_all_tags('ocean') && query.biome_has_all_tags('lukewarm') && query.biome_has_all_tags('deep')"},
                  {"deep_ocean": "query.biome_has_all_tags('ocean') && query.biome_has_all_tags('lukewarm') == 0 && query.biome_has_all_tags('frozen') == 0 && query.biome_has_all_tags('cold') == 0 && query.biome_has_all_tags('warm') == 0 && query.biome_has_all_tags('deep')"},
                  {"deep_warm_ocean": "query.biome_has_all_tags('ocean') && query.biome_has_all_tags('warm') && query.biome_has_all_tags('deep')"},
                  {"desert": "query.biome_has_all_tags('desert') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('hills') == 0"},
                  {"desert_hills": "query.biome_has_all_tags('desert') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('hills')"},
                  {"desert_mutated": "query.biome_has_all_tags('desert') && query.biome_has_all_tags('mutated') && query.biome_has_all_tags('hills') == 0"},
                  {"extreme_hills": "query.biome_has_all_tags('extreme_hills') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('forest') == 0 && query.biome_has_all_tags('edge') == 0"},
                  {"extreme_hills_edge": "query.biome_has_all_tags('extreme_hills') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('forest') == 0 && query.biome_has_all_tags('edge')"},
                  {"extreme_hills_forest": "query.biome_has_all_tags('extreme_hills') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('forest') && query.biome_has_all_tags('edge') == 0"},
                  {"extreme_hills_mutated": "query.biome_has_all_tags('extreme_hills') && query.biome_has_all_tags('mutated') && query.biome_has_all_tags('forest') == 0 && query.biome_has_all_tags('edge') == 0"},
                  {"extreme_hills_mutated_forest": "query.biome_has_all_tags('extreme_hills') && query.biome_has_all_tags('mutated') && query.biome_has_all_tags('forest') && query.biome_has_all_tags('edge') == 0"},
                  {"flower_forest": "query.biome_has_all_tags('flower_forest')"},
                  {"forest": "query.biome_has_all_tags('forest') && query.biome_has_any_tag('birch', 'taiga', 'roofed', 'extreme_hills') == 0 && query.biome_has_any_tag('hills') == 0"},
                  {"forest_hills": "query.biome_has_all_tags('forest') && query.biome_has_any_tag('birch', 'taiga', 'roofed', 'extreme_hills') == 0 && query.biome_has_any_tag('hills')"},
                  {"frozen_ocean": "query.biome_has_all_tags('ocean') && query.biome_has_all_tags('frozen') && query.biome_has_all_tags('monster') && query.biome_has_all_tags('deep') == 0"},
                  {"frozen_river": "query.biome_has_all_tags('river') && query.biome_has_all_tags('frozen')"},
                  {"ice_mountains": "query.biome_has_all_tags('ice') && query.biome_has_all_tags('mountain')"},
                  {"ice_plains": "query.biome_has_all_tags('ice_plains') && query.biome_has_all_tags('mutated') == 0"},
                  {"ice_plains_spikes": "query.biome_has_all_tags('ice_plains') && query.biome_has_all_tags('mutated')"},
                  {"jungle": "query.biome_has_all_tags('jungle') && query.biome_has_all_tags('edge') == 0 && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('hills') == 0 && query.biome_has_all_tags('bamboo') == 0"},
                  {"jungle_edge": "query.biome_has_all_tags('jungle') && query.biome_has_all_tags('edge') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('hills') == 0 && query.biome_has_all_tags('bamboo') == 0"},
                  {"jungle_edge_mutated": "query.biome_has_all_tags('jungle') && query.biome_has_all_tags('edge') && query.biome_has_all_tags('mutated') && query.biome_has_all_tags('hills') == 0 && query.biome_has_all_tags('bamboo') == 0"},
                  {"jungle_hills": "query.biome_has_all_tags('jungle') && query.biome_has_all_tags('edge') == 0 && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('hills') && query.biome_has_all_tags('bamboo') == 0"},
                  {"jungle_mutated": "query.biome_has_all_tags('jungle') && query.biome_has_all_tags('edge') == 0 && query.biome_has_all_tags('mutated') && query.biome_has_all_tags('hills') == 0 && query.biome_has_all_tags('bamboo') == 0"},
                  {"lukewarm_ocean": "query.biome_has_all_tags('ocean') && query.biome_has_all_tags('lukewarm') && query.biome_has_all_tags('deep') == 0"},
                  {"mega_spruce_taiga": "query.biome_has_all_tags('mega') && query.biome_has_all_tags('hills') == 0 && query.biome_has_all_tags('mutated')"},
                  {"mega_spruce_taiga_hills": "query.biome_has_all_tags('mega') && query.biome_has_all_tags('hills') && query.biome_has_all_tags('mutated')"},
                  {"mega_taiga": "query.biome_has_all_tags('mega') && query.biome_has_all_tags('hills') == 0 && query.biome_has_all_tags('mutated') == 0"},
                  {"mega_taiga_hills": "query.biome_has_all_tags('mega') && query.biome_has_all_tags('hills') && query.biome_has_all_tags('mutated') == 0"},
                  {"mesa": "query.biome_has_all_tags('mesa') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('plateau') == 0 && query.biome_has_all_tags('stone') == 0"},
                  {"mesa_bryce": "query.biome_has_all_tags('mesa') && query.biome_has_all_tags('mutated') && query.biome_has_all_tags('plateau') == 0 && query.biome_has_all_tags('stone') == 0"},
                  {"mesa_plateau": "query.biome_has_all_tags('mesa') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('plateau') && query.biome_has_all_tags('stone') == 0"},
                  {"mesa_plateau_mutated": "query.biome_has_all_tags('mesa') && query.biome_has_all_tags('mutated') && query.biome_has_all_tags('plateau') && query.biome_has_all_tags('stone') == 0"},
                  {"mesa_plateau_stone": "query.biome_has_all_tags('mesa') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('plateau') && query.biome_has_all_tags('stone')"},
                  {"mesa_plateau_stone_mutated": "query.biome_has_all_tags('mesa') && query.biome_has_all_tags('mutated') && query.biome_has_all_tags('plateau') && query.biome_has_all_tags('stone')"},
                  {"mushroom_island": "query.biome_has_all_tags('mooshroom_island') && query.biome_has_any_tag('shore') == 0"},
                  {"mushroom_island_shore": "query.biome_has_all_tags('mooshroom_island') && query.biome_has_any_tag('shore')"},
                  {"ocean": "query.biome_has_all_tags('ocean') && query.biome_has_any_tag('deep', 'warm', 'frozen', 'lukewarm', 'cold') == 0"},
                  {"plains": "query.biome_has_all_tags('plains') && query.biome_has_any_tag('mutated') == 0"},
                  {"river": "query.biome_has_all_tags('river') && query.biome_has_all_tags('frozen') == 0"},
                  {"roofed_forest": "query.biome_has_all_tags('roofed') && query.biome_has_all_tags('mutated') == 0"},
                  {"roofed_forest_mutated": "query.biome_has_all_tags('roofed') && query.biome_has_all_tags('mutated')"},
                  {"savanna": "query.biome_has_all_tags('savanna') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('plateau') == 0"},
                  {"savanna_mutated": "query.biome_has_all_tags('savanna') && query.biome_has_all_tags('mutated') && query.biome_has_all_tags('plateau') == 0"},
                  {"savanna_plateau": "query.biome_has_all_tags('savanna') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('plateau')"},
                  {"savanna_plateau_mutated": "query.biome_has_all_tags('savanna') && query.biome_has_all_tags('mutated') && query.biome_has_all_tags('plateau')"},
                  {"stone_beach": "query.biome_has_all_tags('beach') && query.biome_has_any_tag('stone')"},
                  {"sunflower_plains": "query.biome_has_all_tags('plains') && query.biome_has_any_tag('mutated')"},
                  {"swamp": "query.biome_has_all_tags('swamp') && query.biome_has_any_tag('mutated') == 0"},
                  {"swamp_mutated": "query.biome_has_all_tags('swamp') && query.biome_has_any_tag('mutated')"},
                  {"taiga": "query.biome_has_all_tags('taiga') && query.biome_has_all_tags('hills') == 0 && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('cold') == 0 && query.biome_has_all_tags('mega') == 0"},
                  {"taiga_hills": "query.biome_has_all_tags('taiga') && query.biome_has_all_tags('hills') && query.biome_has_all_tags('mutated') == 0 && query.biome_has_all_tags('cold') == 0 && query.biome_has_all_tags('mega') == 0"},
                  {"taiga_mutated": "query.biome_has_all_tags('taiga') && query.biome_has_all_tags('hills') == 0 && query.biome_has_all_tags('mutated') && query.biome_has_all_tags('cold') == 0 && query.biome_has_all_tags('mega') == 0"},
                  {"warm_ocean": "query.biome_has_all_tags('ocean') && query.biome_has_all_tags('warm') && query.biome_has_all_tags('deep') == 0"},
                  
                  {"basalt_deltas":"q.biome_has_any_tag('basalt_deltas')"},
                  {"crimson_forest":"q.biome_has_any_tag('crimson_forest')"},
                  {"nether_wastes":"q.biome_has_any_tag('nether_wastes')"},
                  {"soulsand_valley":"q.biome_has_any_tag('soulsand_valley')"},
                  {"warped_forest":"q.biome_has_any_tag('warped_forest')"}
                ]
            },
            "bamboo_jungle":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_bamboo_jungle"]},
            "bamboo_jungle_hills":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_bamboo_jungle_hills"]},
            "beach":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_beach"]},
            "birch_forest":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_birch_forest"]},
            "birch_forest_hills":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_birch_forest_hills"]},
            "birch_forest_hills_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_birch_forest_hills_mutated"]},
            "birch_forest_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_birch_forest_mutated"]},
            "cold_beach":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_cold_beach"]},
            "cold_ocean":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_cold_ocean"]},
            "cold_taiga":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_cold_taiga"]},
            "cold_taiga_hills":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_cold_taiga_hills"]},
            "cold_taiga_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_cold_taiga_mutated"]},
            "deep_cold_ocean":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_deep_cold_ocean"]},
            "deep_frozen_ocean":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_deep_frozen_ocean"]},
            "deep_lukewarm_ocean":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_deep_lukewarm_ocean"]},
            "deep_ocean":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_deep_ocean"]},
            "deep_warm_ocean":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_deep_warm_ocean"]},
            "desert":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_desert"]},
            "desert_hills":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_desert_hills"]},
            "desert_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_desert_mutated"]},
            "extreme_hills":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_extreme_hills"]},
            "extreme_hills_edge":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_extreme_hills_edge"]},
            "extreme_hills_forest":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_extreme_hills_forest"]},
            "extreme_hills_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_extreme_hills_mutated"]},
            "extreme_hills_mutated_forest":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_extreme_hills_mutated_forest"]},
            "flower_forest":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_flower_forest"]},
            "forest":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_forest"]},
            "forest_hills":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_forest_hills"]},
            "frozen_ocean":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_frozen_ocean"]},
            "frozen_river":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_frozen_river"]},
            "ice_mountains":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_ice_mountains"]},
            "ice_plains":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_ice_plains"]},
            "ice_plains_spikes":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_ice_plains_spikes"]},
            "jungle":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_jungle"]},
            "jungle_edge":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_jungle_edge"]},
            "jungle_edge_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_jungle_edge_mutated"]},
            "jungle_hills":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_jungle_hills"]},
            "jungle_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_jungle_mutated"]},
            "lukewarm_ocean":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_lukewarm_ocean"]},
            "mega_spruce_taiga":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_mega_spruce_taiga"]},
            "mega_spruce_taiga_hills":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_mega_spruce_taiga_hills"]},
            "mega_taiga":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_mega_taiga"]},
            "mega_taiga_hills":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_mega_taiga_hills"]},
            "mesa":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_mesa"]},
            "mesa_bryce":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_mesa_bryce"]},
            "mesa_plateau":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_mesa_plateau"]},
            "mesa_plateau_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_mesa_plateau_mutated"]},
            "mesa_plateau_stone":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_mesa_plateau_stone"]},
            "mesa_plateau_stone_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_mesa_plateau_stone_mutated"]},
            "mushroom_island":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_mushroom_island"]},
            "mushroom_island_shore":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_mushroom_island_shore"]},
            "ocean":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_ocean"]},
            "plains":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_plains"]},
            "river":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_river"]},
            "roofed_forest":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_roofed_forest"]},
            "roofed_forest_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_roofed_forest_mutated"]},
            "savanna":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_savanna"]},
            "savanna_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_savanna_mutated"]},
            "savanna_plateau":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_savanna_plateau"]},
            "savanna_plateau_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_savanna_plateau_mutated"]},
            "stone_beach":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_stone_beach"]},
            "sunflower_plains":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_sunflower_plains"]},
            "swamp":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_swamp"]},
            "swamp_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_swamp_mutated"]},
            "taiga":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_taiga"]},
            "taiga_hills":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_taiga_hills"]},
            "taiga_mutated":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_taiga_mutated"]},
            "warm_ocean":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_warm_ocean"]},
            
            "basalt_deltas":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_basalt_deltas"]},
            "crimson_forest":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_crimson_forest"]},
            "nether_wastes":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_nether_wastes"]},
            "soulsand_valley":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_soulsand_valley"]},
            "warped_forest":{"transitions":[{ "on_detect":"1" }],"on_entry":["/tag @s add biome_warped_forest"]}
         }
      },

      "controller.animation.adv.shulkerY":{
         "initial_state":"on_detect",
         "states":{
            "on_detect":{
               "transitions":[{ "on_levitate":"q.is_levitating" }]
            },
            "on_levitate":{
              "transitions":[{ "diff_pos":"1" }],
              "on_entry": ["v.y_position = (q.position(1)-4);"],
              "on_exit": ["v.y_position = (q.position(1)-4);"]
            },
            "diff_pos":{
              "transitions":[{ "test_pos":"q.is_levitating || v.y_position_diff >= 1" },{ "on_detect":"!q.is_levitating || v.y_position_diff <= 0" }],
              "on_entry": ["v.y_position_diff = Math.floor((q.position(1) - v.y_position));"],
              "on_exit": ["v.y_position_diff = Math.floor((q.position(1) - v.y_position));"]
            },
            "test_pos":{
              "transitions":[
                { "48":"v.y_position_diff > 53" },
                { "diff_pos":"v.y_position_diff < 54" },
                { "on_detect":"!q.is_levitating || v.y_position_diff <= 0" }
              ]
            },
            "48":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv48] ~~~ function advancement/grant/end/levitate"]}
         }
      },

      "controller.animation.adv.sleep":{
         "initial_state":"on_detect",
         "states":{
            "on_detect":{
              "transitions":[{ "on_sleep":"q.is_sleeping" }]
            },
            "on_sleep":{
              "transitions":[{ "55":"!q.is_sleeping" }]
            },
            "55":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!adv55] ~~~ function advancement/grant/adventure/sleep_in_bed"]}
         }
      },

      "controller.animation.arrow.travel":{
         "initial_state":"on_detect",
         "states":{
            "on_detect":{
               "transitions":[{ "on_shoot":"1" }]
            },
            "on_shoot":{
              "transitions":[{ "diff_pos":"1" }],
              "on_entry": [
                "v.x_position = (q.position(0) * 1);",
                "v.z_position = (q.position(2) * 1);"
              ],
              "on_exit": [
                // Distance offset when the advancement would be trigger early/late to compensate for the delay
                "v.distance_offset = Math.random(19, 20);"
              ]
            },
            "diff_pos":{
              "transitions":[{ "test_pos":"1" }],
              "on_entry": [
                "v.x_position_diff = (Math.abs(Math.floor((q.position(0) - v.x_position)))) + v.distance_offset;",
                "v.z_position_diff = (Math.abs(Math.floor((q.position(2) - v.z_position)))) + v.distance_offset;"
              ]
            },
            "test_pos":{
              "transitions":[
                { "traveled":"(v.x_position_diff > 49 || v.z_position_diff > 49)" },
                { "diff_pos":"(v.x_position_diff < 50 || v.z_position_diff < 50) && !q.is_baby" },
                { "on_detect":"(v.x_position_diff < 50 || v.z_position_diff < 50) && q.is_baby" }
              ]
            },
            "traveled":{"transitions":[{ "on_detect":"!q.is_baby" }],"on_entry":["/execute @s[tag=!traveled] ~~~ playsound random.orb @a[tag=r4isen1920]","/tag @s add traveled"]}
         }
      },

      "controller.animation.adv.consumeTime":{
         "initial_state":"on_detect",
         "states":{
            "on_detect":{
               "transitions":[
                  { "on_consume":"v.is_consuming_food_item" },
                  { "not_eating":"!v.is_consuming_food_item" }
               ]
            },
            "on_consume":{
              "transitions":[
                { "on_detect":"!v.is_consuming_food_item" },
                { "normal_tick":"(q.get_equipped_item_name != 'dried_kelp')" },
                { "dried_kelp":"(q.get_equipped_item_name == 'dried_kelp')" }
              ]
            },
            "normal_tick":{
              "transitions":[{ "on_detect":"1" }],
              "on_entry": [
                "/scoreboard players add @s[scores={consumeFood=..8}] consumeFood 1",
                "/tag @s[scores={consumeFood=9}] add is_consumed"
              ]
            },
            "dried_kelp":{
              "transitions":[{ "on_detect":"1" }],
              "on_entry": [
                "/tag @s add is_consumed"
              ]
            },
            
            "not_eating":{
               "transitions":[{ "on_detect":"1" }],
               "on_entry": [
                 "/scoreboard players set @s consumeFood 0",
                 "/tag @s remove is_consumed"
              ]
            }
         }
      },

      "controller.animation.adv.consumeFood":{
         "initial_state":"on_detect",
         "states":{
            "on_detect":{
               "transitions":[
                  { "on_eat_apple":"(q.get_equipped_item_name == 'apple' && q.is_using_item)" },
                  { "on_eat_baked_potato":"(q.get_equipped_item_name == 'baked_potato' && q.is_using_item)" },
                  { "on_eat_beetroot":"(q.get_equipped_item_name == 'beetroot' && q.is_using_item)" },
                  { "on_eat_beetroot_soup":"(q.get_equipped_item_name == 'beetroot_soup' && q.is_using_item)" },
                  { "on_eat_bread":"(q.get_equipped_item_name == 'bread' && q.is_using_item)" },
                  { "on_eat_carrot":"(q.get_equipped_item_name == 'carrot' && q.is_using_item)" },
                  { "on_eat_chorus_fruit":"(q.get_equipped_item_name == 'chorus_fruit' && q.is_using_item)" },
                  { "on_eat_cooked_chicken":"(q.get_equipped_item_name == 'cooked_chicken' && q.is_using_item)" },
                  { "on_eat_cooked_cod":"(q.get_equipped_item_name == 'cooked_cod' && q.is_using_item)" },
                  { "on_eat_cooked_mutton":"(q.get_equipped_item_name == 'cooked_mutton' && q.is_using_item)" },
                  { "on_eat_cooked_porkchop":"(q.get_equipped_item_name == 'cooked_porkchop' && q.is_using_item)" },
                  { "on_eat_cooked_rabbit":"(q.get_equipped_item_name == 'cooked_rabbit' && q.is_using_item)" },
                  { "on_eat_cooked_salmon":"(q.get_equipped_item_name == 'cooked_salmon' && q.is_using_item)" },
                  { "on_eat_cookie":"(q.get_equipped_item_name == 'cookie' && q.is_using_item)" },
                  { "on_eat_dried_kelp":"(q.get_equipped_item_name == 'dried_kelp' && q.is_using_item)" },
                  { "on_eat_enchanted_golden_apple":"(q.get_equipped_item_name == 'enchanted_golden_apple' && q.is_using_item)" },
                  { "on_eat_glow_berries":"(q.get_equipped_item_name == 'glow_berries' && q.is_using_item)" },
                  { "on_eat_golden_apple":"(q.get_equipped_item_name == 'golden_apple' && q.is_using_item)" },
                  { "on_eat_golden_carrot":"(q.get_equipped_item_name == 'golden_carrot' && q.is_using_item)" },
                  { "on_eat_honey_bottle":"(q.get_equipped_item_name == 'honey_bottle' && q.is_using_item)" },
                  { "on_eat_melon_slice":"(q.get_equipped_item_name == 'melon_slice' && q.is_using_item)" },
                  { "on_eat_mushroom_stew":"(q.get_equipped_item_name == 'mushroom_stew' && q.is_using_item)" },
                  { "on_eat_poisonous_potato":"(q.get_equipped_item_name == 'poisonous_potato' && q.is_using_item)" },
                  { "on_eat_potato":"(q.get_equipped_item_name == 'potato' && q.is_using_item)" },
                  { "on_eat_pufferfish":"(q.get_equipped_item_name == 'pufferfish' && q.is_using_item)" },
                  { "on_eat_pumpkin_pie":"(q.get_equipped_item_name == 'pumpkin_pie' && q.is_using_item)" },
                  { "on_eat_rabbit_stew":"(q.get_equipped_item_name == 'rabbit_stew' && q.is_using_item)" },
                  { "on_eat_raw_beef":"(q.get_equipped_item_name == 'beef' && q.is_using_item)" },
                  { "on_eat_raw_chicken":"(q.get_equipped_item_name == 'chicken' && q.is_using_item)" },
                  { "on_eat_raw_cod":"(q.get_equipped_item_name == 'cod' && q.is_using_item)" },
                  { "on_eat_raw_mutton":"(q.get_equipped_item_name == 'mutton' && q.is_using_item)" },
                  { "on_eat_raw_porkchop":"(q.get_equipped_item_name == 'porkchop' && q.is_using_item)" },
                  { "on_eat_raw_rabbit":"(q.get_equipped_item_name == 'rabbit' && q.is_using_item)" },
                  { "on_eat_raw_salmon":"(q.get_equipped_item_name == 'salmon' && q.is_using_item)" },
                  { "on_eat_rotten_flesh":"(q.get_equipped_item_name == 'rotten_flesh' && q.is_using_item)" },
                  { "on_eat_spider_eye":"(q.get_equipped_item_name == 'spider_eye' && q.is_using_item)" },
                  { "on_eat_steak":"(q.get_equipped_item_name == 'cooked_beef' && q.is_using_item)" },
                  { "on_eat_suspicious_stew":"(q.get_equipped_item_name == 'suspicious_stew' && q.is_using_item)" },
                  { "on_eat_sweet_berries":"(q.get_equipped_item_name == 'sweet_berries' && q.is_using_item)" },
                  { "on_eat_tropical_fish":"(q.get_equipped_item_name == 'tropical_fish' && q.is_using_item)" }       
                ],
                "on_entry":["v.is_consuming_food_item = 0.0;"],
                "on_exit":["v.is_consuming_food_item = 1.0;"]
            },
            "on_eat_apple":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'apple' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_apple"]},
            "on_eat_baked_potato":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'baked_potato' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_baked_potato"]},
            "on_eat_beetroot":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'beetroot' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_beetroot"]},
            "on_eat_beetroot_soup":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'beetroot_soup' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_beetroot_soup"]},
            "on_eat_bread":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'bread' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_bread"]},
            "on_eat_carrot":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'carrot' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_carrot"]},
            "on_eat_chorus_fruit":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'chorus_fruit' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_chorus_fruit"]},
            "on_eat_cooked_chicken":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'cooked_chicken' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_cooked_chicken"]},
            "on_eat_cooked_cod":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'cooked_cod' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_cooked_cod"]},
            "on_eat_cooked_mutton":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'cooked_mutton' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_cooked_mutton"]},
            "on_eat_cooked_porkchop":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'cooked_porkchop' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_cooked_porkchop"]},
            "on_eat_cooked_rabbit":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'cooked_rabbit' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_cooked_rabbit"]},
            "on_eat_cooked_salmon":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'cooked_salmon' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_cooked_salmon"]},
            "on_eat_cookie":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'cookie' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_cookie"]},
            "on_eat_dried_kelp":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'dried_kelp' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_dried_kelp"]},
            "on_eat_enchanted_golden_apple":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'enchanted_golden_apple' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_enchanted_golden_apple"]},
            "on_eat_glow_berries":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'glow_berries' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_glow_berries"]},
            "on_eat_golden_apple":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'golden_apple' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_golden_apple"]},
            "on_eat_golden_carrot":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'golden_carrot' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_golden_carrot"]},
            "on_eat_honey_bottle":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'honey_bottle' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_honey_bottle"]},
            "on_eat_melon_slice":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'melon_slice' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_melon_slice"]},
            "on_eat_mushroom_stew":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'mushroom_stew' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_mushroom_stew"]},
            "on_eat_poisonous_potato":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'poisonous_potato' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_poisonous_potato"]},
            "on_eat_potato":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'potato' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_potato"]},
            "on_eat_pufferfish":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'pufferfish' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_pufferfish"]},
            "on_eat_pumpkin_pie":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'pumpkin_pie' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_pumpkin_pie"]},
            "on_eat_rabbit_stew":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'rabbit_stew' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_rabbit_stew"]},
            "on_eat_raw_beef":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'beef' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_raw_beef"]},
            "on_eat_raw_chicken":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'chicken' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_raw_chicken"]},
            "on_eat_raw_cod":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'cod' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_raw_cod"]},
            "on_eat_raw_mutton":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'mutton' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_raw_mutton"]},
            "on_eat_raw_porkchop":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'porkchop' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_raw_porkchop"]},
            "on_eat_raw_rabbit":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'rabbit' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_raw_rabbit"]},
            "on_eat_raw_salmon":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'salmon' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_raw_salmon"]},
            "on_eat_rotten_flesh":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'rotten_flesh' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_rotten_flesh"]},
            "on_eat_spider_eye":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'spider_eye' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_spider_eye"]},
            "on_eat_steak":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'cooked_beef' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_steak"]},
            "on_eat_suspicious_stew":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'suspicious_stew' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_suspicious_stew"]},
            "on_eat_sweet_berries":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'sweet_berries' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_sweet_berries"]},
            "on_eat_tropical_fish":{"transitions":[{"on_detect":"(q.get_equipped_item_name != 'tropical_fish' || !q.is_using_item)"}],"on_exit":["/tag @s[tag=is_consumed] add consumed_tropical_fish"]}
         }
      },
      
      "controller.animation.adv.minecart":{
         "initial_state":"on_detect",
         "states":{
            "on_detect":{
               "transitions":[{ "on_ride":"q.is_chested" }]
            },
            "on_ride":{
              "transitions":[{ "diff_pos":"1" }],
              "on_entry": [
                "v.x_position = (q.position(0) * 1);",
                "v.z_position = (q.position(2) * 1);"
              ]
            },
            "diff_pos":{
              "transitions":[{ "test_pos":"1" }],
              "on_entry": [
                "v.x_position_diff = (Math.abs(Math.floor((q.position(0) - v.x_position))));",
                "v.z_position_diff = (Math.abs(Math.floor((q.position(2) - v.z_position))));"
              ]
            },
            "test_pos":{
              "transitions":[
                { "traveled":"(v.x_position_diff > 999 || v.z_position_diff > 999)" },
                { "diff_pos":"(v.x_position_diff < 1000 || v.z_position_diff < 1000) && q.is_chested" },
                { "on_detect":"(v.x_position_diff < 1000 || v.z_position_diff < 1000) && !q.is_chested" }
              ]
            },
            "traveled":{"transitions":[{ "on_detect":"1" }],"on_entry":["/execute @s[tag=!ach12] ~~~ function achievement/give/onARail"]}
         }
      }
   }
}